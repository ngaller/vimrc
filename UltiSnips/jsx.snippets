
priority -50

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet rc "React.Component"
import React from 'react';

/**
 * <$1 />
 */
class $1 extends React.Component {
	render() {
		return (
			$0
		);
	}
}
// $1.propTypes = { };

export default $1;
endsnippet

snippet ir "Import React"
import React from 'react';

endsnippet

snippet prc "Pure render component"
${1:import React from 'react';
}
/**
 * <$2 />
 */
const $2 = (props) => {
	$3
};

${4:export default $2;}
endsnippet

snippet cis "Constructor with initial state"
constructor() {
	super();
	this.state = {
		$1
	};
}

endsnippet


snippet cdm "componentDidMount"
componentDidMount() {
	$1
}

endsnippet

snippet cwu "componentWillUnmount"
componentWillUnmount() {
	$1
}

endsnippet

snippet cwup "componentWillUpdate"
componentWillUpdate() {
	$1
}

endsnippet

snippet scu "shouldComponentUpdate"
shouldComponentUpdate() {
	$1
}

endsnippet

snippet cwrp "componentWillReceiveProps"
componentWillReceiveProps() {
	$1
}

endsnippet

snippet cdu "componentDidUpdate"
componentDidUpdate() {
	$1
}

endsnippet

snippet tss "this.setState"
this.setState({
	$1
});
endsnippet

snippet rpt "React.propTypes"
${1:propName}: React.PropTypes.${2:type}$0
endsnippet

snippet r( "Return jsx"
return (
	$1
);$0
endsnippet

# Full size snippets (those are more templates
# than snippets!)

# snippet rccmd "React.Component, Tracker React"
# /**
#  * <$1 />
#  * ${2:TODO: Short documentation}
#  */
# class $1 extends TrackerReact(React.Component) {
#     // Component Setup {{{
#     contextTypes: {
#         router: React.PropTypes.object.isRequired
#     },
#     // }}}
#
#     // Data {{{
#     getInitialState() {
#         return {
#         };
#     },
#
#     getMeteorData() {
#         var subs = [
#             Meteor.subscribe(''),
#         ];
#
#         return {
#             loadingSubs: !_.every(subs, c => c.ready())
#         };
#     },
#     // }}}
#
# 	// Events {{{
#
# 	// }}}
#
# 	// Render {{{
# 	render() {
# 		return (
# 			<div className=''>
# 				$0
# 			</div>
# 		)
# 	}
# 	// }}}
# });
#
# // vim:fdm=marker
# endsnippet
